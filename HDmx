#!/usr/bin/env python

import serial, liblo, sys,time

###CODE IMPORTED FROM ##############
#https://github.com/davepaul0/DmxPy#

DMXOPEN = chr(126)
DMXCLOSE = chr(231)
DMXINTENSITY=chr(6)+chr(1)+chr(2)				
DMXINIT1= chr(03)+chr(02)+chr(0)+chr(0)+chr(0)
DMXINIT2= chr(10)+chr(02)+chr(0)+chr(0)+chr(0)

class DmxPy:
	def __init__(self, serialPort):
		try:
			self.serial=serial.Serial(serialPort, baudrate=57600)
		except:
			print "Error: could not open Serial Port"
			sys.exit(0)
		self.serial.write( DMXOPEN+DMXINIT1+DMXCLOSE)
		self.serial.write( DMXOPEN+DMXINIT2+DMXCLOSE)
		
		self.dmxData=[chr(0)]*513   #128 plus "spacer".
		
	def setChannel(self, chan, intensity):
		if chan > 512 : chan = 512
		if chan < 0 : chan = 0
		if intensity > 255 : intensity = 255
		if intensity < 0 : intensity = 0
		self.dmxData[chan] = chr(intensity)
		
	def blackout(self):
		for i in xrange (1, 512, 1):
			self.dmxData[i] = chr(0)
		
	def render(self):
		sdata=''.join(self.dmxData)
		self.serial.write(DMXOPEN+DMXINTENSITY+sdata+DMXCLOSE)
######## END OF IMPORTED CODE #################


# create server, listening on port 3000
try:
    server = liblo.Server(3000)
except liblo.ServerError, err:
    print str(err)
    sys.exit()

try:
    dmx = DmxPy('/dev/ttyUSB0')
except:
    print "Unable to open /dev/ttyUSB0"
    sys.exit()

def send(path, args):
    chan, val = args
    val = int(round(val))
    dmx.setChannel(chan, val)
    dmx.render()
    #print "DMX '%d' at '%d'" % (chan, val)

def blackout(path, args):
    dmx.blackout()
    dmx.render()

# register methods
server.add_method("/dmx/send", 'ii', send)
server.add_method("/dmx/send", 'if', send)
server.add_method("/dmx/blackout", None, blackout)

# loop and dispatch messages every 20ms
while True:
    server.recv(20)
