#!/usr/bin/env python

import liblo, sys,time
import select
import serial.tools.list_ports
import DmxPy

dmx = None

def openDMX():
    ports = list(serial.tools.list_ports.comports())
    for p in ports:
        if 'dmx usb pro' in p.description.lower():
            print ('ENTTEC DMX USB Pro detected at ', p.device)
            global dmx
            dmx = DmxPy.DmxPy(p.device)
    if not dmx:
        print ('No device found..')

# create server, listening on port 3000
try:
    server = liblo.Server(3000)
except liblo.ServerError, err:
    print str(err)
    sys.exit()

def set(path, args):
    chan, val = args
    val = int(round(val))
    dmx.set(chan, val)
    dmx.render()
    if chan == 1:
        print "DMX '%d' at '%d'" % (chan, val)

def setnorender(path, args):
    chan, val = args
    val = int(round(val))
    dmx.set(chan, val)
    if chan == 1:
        print "DMX buffer '%d' at '%d'" % (chan, val)

def render():
    dmx.render()
    print "DMX render"

def blackout(path, args):
    dmx.setall(0)
    dmx.render()
    print "DMX all off"

def setall(path, args):
    if len(args) > 0:
        val = int(round(args[0]))
    else:
        val = 255
    dmx.setall(val)
    dmx.render()
    print "DMX all on"

# register methods
server.add_method("/dmx/set", 'ii', set)
server.add_method("/dmx/set", 'if', set)

server.add_method("/dmx/buffer", 'ii', setnorender)
server.add_method("/dmx/render", None, render)

server.add_method("/dmx/full", None, setall)
server.add_method("/dmx/setall", 'i', setall)

server.add_method("/dmx/off", None, blackout)
server.add_method("/dmx/blackout", None, blackout)

# stdin monitoring
read_list = [sys.stdin]

# loop and dispatch messages every 20ms
while True:

    if not dmx:
        # open Interface
        openDMX()
        time.sleep(1)

    else:
        # listen OSC
        server.recv(20)
